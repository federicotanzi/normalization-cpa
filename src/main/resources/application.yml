spring:
  application:
    name: normalization
  # ===============================
  # = JPA / HIBERNATE
  # ===============================
  # Use spring.jpa.properties.* for Hibernate native properties
  # (the prefix is stripped before adding them to the entity manager).
  # Show or not log for each sql query
  jpa:
    hibernate:
      show-sql: true
      # Hibernate ddl auto (validate, create, create-drop, update):
      # with "update" the database schema will be automatically updated
      # accordingly to java entities found in the project
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      # Allows Hibernate to generate SQL optimized for a particular DBMS
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          lob:
            non_contextual_creation: true

  # Upload File Size
  servlet:
    multipart:
      maxFileSize: 200MB
      maxRequestSize: 200MB

## PORT
server:
  port: 8080

---

spring:
  profiles: dev
  # ===============================
  # = DATA SOURCE
  # ===============================
  # Set here configurations for the database connection
  # Connection url for the database
  datasource:
    url: jdbc:postgresql://127.0.0.1:5432/address-cpa
    # Username and password
    username: postgres
    password: admin
    # Keep the connection alive if idle for a long time (needed in production)
    testWhileIdle: true
    validationQuery: SELECT 1

---

spring:
  profiles: prod
  # ===============================
  # = DATA SOURCE
  # ===============================
  # Set here configurations for the database connection
  # Connection url for the database
  datasource:
    url: jdbc:postgresql://127.0.0.1:5432/address-cpa
    # Username and password
    username: closeup
    password: WkZg2M
    # Keep the connection alive if idle for a long time (needed in production)
    testWhileIdle: true
    validationQuery: SELECT 1
